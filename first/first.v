//name : main
//source_file : <closed file 'main.c', mode 'w' at 0x7fc6560e0540>

///+============================================================================+
///|                                                                            |
///|                     This file was generated by Chips                       |
///|                                                                            |
///|                                  Chips                                     |
///|                                                                            |
///|                      http://github.com/dawsonjon/Chips-2.0                 |
///|                                                                            |
///|                                                             Python powered |
///+============================================================================+
module main(exception);
  integer file_count;
  parameter  stop = 3'd0,
  instruction_fetch = 3'd1,
  operand_fetch = 3'd2,
  execute = 3'd3,
  load = 3'd4,
  wait_state = 3'd5;
  reg [31:0] timer;
  reg [63:0] timer_clock;
  reg [15:0] program_counter;
  reg [15:0] program_counter_1;
  reg [15:0] program_counter_2;
  reg [42:0] instruction;
  reg [2:0] opcode_2;
  reg [3:0] a;
  reg [3:0] b;
  reg [3:0] z;
  reg write_enable;
  reg [3:0] address_a_2;
  reg [3:0] address_b_2;
  reg [3:0] address_z_2;
  reg [3:0] address_z_3;
  reg [31:0] load_data;
  reg [31:0] write_output;
  reg [31:0] write_value;
  reg [31:0] read_input;
  reg [15:0] literal_2;
  reg [31:0] a_hi;
  reg [31:0] b_hi;
  reg [31:0] a_lo;
  reg [31:0] b_lo;
  reg [63:0] long_result;
  reg [31:0] result;
  reg [15:0] address;
  reg [31:0] data_out;
  reg [31:0] data_in;
  reg [31:0] carry;
  reg clk;
  reg rst;
  reg [5:0] state;
  output reg exception;
  reg [26:0] instructions [50:0];
  reg [31:0] memory [1023:0];
  reg [31:0] registers [15:0];
  wire [31:0] operand_a;
  wire [31:0] operand_b;
  wire [31:0] register_a;
  wire [31:0] register_b;
  wire [15:0] literal;
  wire [2:0] opcode;
  wire [3:0] address_a;
  wire [3:0] address_b;
  wire [3:0] address_z;
  wire [15:0] load_address;
  wire [15:0] store_address;
  wire [31:0] store_data;
  wire  store_enable;
  wire  forward_a;
  wire  forward_b;

  //////////////////////////////////////////////////////////////////////////////
  // CLOCK AND RESET GENERATION                                                 
  //                                                                            
  // This file was generated in test bench mode. In this mode, the verilog      
  // output file can be executed directly within a verilog simulator.           
  // In test bench mode, a simulated clock and reset signal are generated within
  // the output file.                                                           
  // Verilog files generated in testbecnch mode are not suitable for synthesis, 
  // or for instantiation within a larger design.
  
  initial
  begin
    rst <= 1'b1;
    #50 rst <= 1'b0;
  end


  //////////////////////////////////////////////////////////////////////////////
  // MEMORY INITIALIZATION                                                      
  //                                                                            
  // In order to reduce program size, array contents have been stored into      
  // memory at initialization. In an FPGA, this will result in the memory being 
  // initialized when the FPGA configures.                                      
  // Memory will not be re-initialized at reset.                                
  // Dissable this behaviour using the no_initialize_memory switch              
  
  initial
  begin
  end


  //////////////////////////////////////////////////////////////////////////////
  // INSTRUCTION INITIALIZATION                                                 
  //                                                                            
  // Initialise the contents of the instruction memory                          
  //
  // Intruction Set
  // ==============
  // 0 {'literal': True, 'op': 'literal'}
  // 1 {'literal': True, 'op': 'addl'}
  // 2 {'literal': True, 'op': 'call'}
  // 3 {'literal': False, 'op': 'stop'}
  // 4 {'literal': False, 'op': 'store'}
  // 5 {'literal': False, 'op': 'load'}
  // 6 {'literal': False, 'op': 'return'}
  // 7 {'literal': False, 'op': 'add'}
  // Intructions
  // ===========
  
  initial
  begin
    instructions[0] = {3'd0, 4'd3, 4'd0, 16'd0};///home/dawsonjon/main.c : 12 {'literal': 0, 'z': 3, 'trace': /home/dawsonjon/main.c : 12, 'op': 'literal'}
    instructions[1] = {3'd0, 4'd4, 4'd0, 16'd0};///home/dawsonjon/main.c : 12 {'literal': 0, 'z': 4, 'trace': /home/dawsonjon/main.c : 12, 'op': 'literal'}
    instructions[2] = {3'd1, 4'd3, 4'd3, 16'd2};///home/dawsonjon/main.c : 12 {'a': 3, 'literal': 2, 'z': 3, 'trace': /home/dawsonjon/main.c : 12, 'op': 'addl'}
    instructions[3] = {3'd1, 4'd7, 4'd4, 16'd0};///home/dawsonjon/main.c : 12 {'a': 4, 'literal': 0, 'z': 7, 'trace': /home/dawsonjon/main.c : 12, 'op': 'addl'}
    instructions[4] = {3'd1, 4'd4, 4'd3, 16'd0};///home/dawsonjon/main.c : 12 {'a': 3, 'literal': 0, 'z': 4, 'trace': /home/dawsonjon/main.c : 12, 'op': 'addl'}
    instructions[5] = {3'd2, 4'd6, 4'd0, 16'd7};///home/dawsonjon/main.c : 12 {'z': 6, 'label': 7, 'trace': /home/dawsonjon/main.c : 12, 'op': 'call'}
    instructions[6] = {3'd3, 4'd0, 4'd0, 16'd0};///home/dawsonjon/main.c : 12 {'trace': /home/dawsonjon/main.c : 12, 'op': 'stop'}
    instructions[7] = {3'd1, 4'd3, 4'd3, 16'd0};///home/dawsonjon/main.c : 7 {'a': 3, 'literal': 0, 'z': 3, 'trace': /home/dawsonjon/main.c : 7, 'op': 'addl'}
    instructions[8] = {3'd4, 4'd0, 4'd3, 16'd6};///home/dawsonjon/main.c : 9 {'a': 3, 'comment': 'push', 'b': 6, 'trace': /home/dawsonjon/main.c : 9, 'op': 'store'}
    instructions[9] = {3'd1, 4'd3, 4'd3, 16'd1};///home/dawsonjon/main.c : 9 {'a': 3, 'literal': 1, 'z': 3, 'trace': /home/dawsonjon/main.c : 9, 'op': 'addl'}
    instructions[10] = {3'd4, 4'd0, 4'd3, 16'd7};///home/dawsonjon/main.c : 9 {'a': 3, 'comment': 'push', 'b': 7, 'trace': /home/dawsonjon/main.c : 9, 'op': 'store'}
    instructions[11] = {3'd1, 4'd3, 4'd3, 16'd1};///home/dawsonjon/main.c : 9 {'a': 3, 'literal': 1, 'z': 3, 'trace': /home/dawsonjon/main.c : 9, 'op': 'addl'}
    instructions[12] = {3'd0, 4'd8, 4'd0, 16'd10};///home/dawsonjon/main.c : 9 {'literal': 10, 'z': 8, 'trace': /home/dawsonjon/main.c : 9, 'op': 'literal'}
    instructions[13] = {3'd4, 4'd0, 4'd3, 16'd8};///home/dawsonjon/main.c : 9 {'a': 3, 'comment': 'push', 'b': 8, 'trace': /home/dawsonjon/main.c : 9, 'op': 'store'}
    instructions[14] = {3'd1, 4'd3, 4'd3, 16'd1};///home/dawsonjon/main.c : 9 {'a': 3, 'literal': 1, 'z': 3, 'trace': /home/dawsonjon/main.c : 9, 'op': 'addl'}
    instructions[15] = {3'd0, 4'd8, 4'd0, 16'd20};///home/dawsonjon/main.c : 9 {'literal': 20, 'z': 8, 'trace': /home/dawsonjon/main.c : 9, 'op': 'literal'}
    instructions[16] = {3'd4, 4'd0, 4'd3, 16'd8};///home/dawsonjon/main.c : 9 {'a': 3, 'comment': 'push', 'b': 8, 'trace': /home/dawsonjon/main.c : 9, 'op': 'store'}
    instructions[17] = {3'd1, 4'd3, 4'd3, 16'd1};///home/dawsonjon/main.c : 9 {'a': 3, 'literal': 1, 'z': 3, 'trace': /home/dawsonjon/main.c : 9, 'op': 'addl'}
    instructions[18] = {3'd1, 4'd7, 4'd4, 16'd0};///home/dawsonjon/main.c : 9 {'a': 4, 'literal': 0, 'z': 7, 'trace': /home/dawsonjon/main.c : 9, 'op': 'addl'}
    instructions[19] = {3'd1, 4'd4, 4'd3, 16'd0};///home/dawsonjon/main.c : 9 {'a': 3, 'literal': 0, 'z': 4, 'trace': /home/dawsonjon/main.c : 9, 'op': 'addl'}
    instructions[20] = {3'd2, 4'd6, 4'd0, 16'd34};///home/dawsonjon/main.c : 9 {'z': 6, 'label': 34, 'trace': /home/dawsonjon/main.c : 9, 'op': 'call'}
    instructions[21] = {3'd1, 4'd3, 4'd3, -16'd2};///home/dawsonjon/main.c : 9 {'a': 3, 'literal': -2, 'z': 3, 'trace': /home/dawsonjon/main.c : 9, 'op': 'addl'}
    instructions[22] = {3'd1, 4'd3, 4'd3, -16'd1};///home/dawsonjon/main.c : 9 {'a': 3, 'comment': 'pop', 'trace': /home/dawsonjon/main.c : 9, 'literal': -1, 'z': 3, 'op': 'addl'}
    instructions[23] = {3'd5, 4'd7, 4'd3, 16'd0};///home/dawsonjon/main.c : 9 {'a': 3, 'z': 7, 'trace': /home/dawsonjon/main.c : 9, 'op': 'load'}
    instructions[24] = {3'd1, 4'd3, 4'd3, -16'd1};///home/dawsonjon/main.c : 9 {'a': 3, 'comment': 'pop', 'trace': /home/dawsonjon/main.c : 9, 'literal': -1, 'z': 3, 'op': 'addl'}
    instructions[25] = {3'd5, 4'd6, 4'd3, 16'd0};///home/dawsonjon/main.c : 9 {'a': 3, 'z': 6, 'trace': /home/dawsonjon/main.c : 9, 'op': 'load'}
    instructions[26] = {3'd0, 4'd2, 4'd0, 16'd0};///home/dawsonjon/main.c : 9 {'literal': 0, 'z': 2, 'trace': /home/dawsonjon/main.c : 9, 'op': 'literal'}
    instructions[27] = {3'd5, 4'd8, 4'd2, 16'd0};///home/dawsonjon/main.c : 9 {'a': 2, 'z': 8, 'trace': /home/dawsonjon/main.c : 9, 'op': 'load'}
    instructions[28] = {3'd0, 4'd8, 4'd0, 16'd0};///home/dawsonjon/main.c : 10 {'literal': 0, 'z': 8, 'trace': /home/dawsonjon/main.c : 10, 'op': 'literal'}
    instructions[29] = {3'd0, 4'd2, 4'd0, 16'd1};///home/dawsonjon/main.c : 10 {'literal': 1, 'z': 2, 'trace': /home/dawsonjon/main.c : 10, 'op': 'literal'}
    instructions[30] = {3'd4, 4'd0, 4'd2, 16'd8};///home/dawsonjon/main.c : 10 {'a': 2, 'b': 8, 'trace': /home/dawsonjon/main.c : 10, 'op': 'store'}
    instructions[31] = {3'd1, 4'd3, 4'd4, 16'd0};///home/dawsonjon/main.c : 10 {'a': 4, 'literal': 0, 'z': 3, 'trace': /home/dawsonjon/main.c : 10, 'op': 'addl'}
    instructions[32] = {3'd1, 4'd4, 4'd7, 16'd0};///home/dawsonjon/main.c : 10 {'a': 7, 'literal': 0, 'z': 4, 'trace': /home/dawsonjon/main.c : 10, 'op': 'addl'}
    instructions[33] = {3'd6, 4'd0, 4'd6, 16'd0};///home/dawsonjon/main.c : 10 {'a': 6, 'trace': /home/dawsonjon/main.c : 10, 'op': 'return'}
    instructions[34] = {3'd1, 4'd3, 4'd3, 16'd0};///home/dawsonjon/main.c : 3 {'a': 3, 'literal': 0, 'z': 3, 'trace': /home/dawsonjon/main.c : 3, 'op': 'addl'}
    instructions[35] = {3'd1, 4'd8, 4'd4, -16'd1};///home/dawsonjon/main.c : 5 {'a': 4, 'literal': -1, 'z': 8, 'trace': /home/dawsonjon/main.c : 5, 'op': 'addl'}
    instructions[36] = {3'd1, 4'd2, 4'd8, 16'd0};///home/dawsonjon/main.c : 5 {'a': 8, 'literal': 0, 'z': 2, 'trace': /home/dawsonjon/main.c : 5, 'op': 'addl'}
    instructions[37] = {3'd5, 4'd8, 4'd2, 16'd0};///home/dawsonjon/main.c : 5 {'a': 2, 'z': 8, 'trace': /home/dawsonjon/main.c : 5, 'op': 'load'}
    instructions[38] = {3'd4, 4'd0, 4'd3, 16'd8};///home/dawsonjon/main.c : 5 {'a': 3, 'comment': 'push', 'b': 8, 'trace': /home/dawsonjon/main.c : 5, 'op': 'store'}
    instructions[39] = {3'd1, 4'd3, 4'd3, 16'd1};///home/dawsonjon/main.c : 5 {'a': 3, 'literal': 1, 'z': 3, 'trace': /home/dawsonjon/main.c : 5, 'op': 'addl'}
    instructions[40] = {3'd1, 4'd8, 4'd4, -16'd2};///home/dawsonjon/main.c : 5 {'a': 4, 'literal': -2, 'z': 8, 'trace': /home/dawsonjon/main.c : 5, 'op': 'addl'}
    instructions[41] = {3'd1, 4'd2, 4'd8, 16'd0};///home/dawsonjon/main.c : 5 {'a': 8, 'literal': 0, 'z': 2, 'trace': /home/dawsonjon/main.c : 5, 'op': 'addl'}
    instructions[42] = {3'd5, 4'd8, 4'd2, 16'd0};///home/dawsonjon/main.c : 5 {'a': 2, 'z': 8, 'trace': /home/dawsonjon/main.c : 5, 'op': 'load'}
    instructions[43] = {3'd1, 4'd3, 4'd3, -16'd1};///home/dawsonjon/main.c : 5 {'a': 3, 'comment': 'pop', 'trace': /home/dawsonjon/main.c : 5, 'literal': -1, 'z': 3, 'op': 'addl'}
    instructions[44] = {3'd5, 4'd10, 4'd3, 16'd0};///home/dawsonjon/main.c : 5 {'a': 3, 'z': 10, 'trace': /home/dawsonjon/main.c : 5, 'op': 'load'}
    instructions[45] = {3'd7, 4'd8, 4'd8, 16'd10};///home/dawsonjon/main.c : 5 {'a': 8, 'z': 8, 'b': 10, 'trace': /home/dawsonjon/main.c : 5, 'op': 'add'}
    instructions[46] = {3'd0, 4'd2, 4'd0, 16'd0};///home/dawsonjon/main.c : 5 {'literal': 0, 'z': 2, 'trace': /home/dawsonjon/main.c : 5, 'op': 'literal'}
    instructions[47] = {3'd4, 4'd0, 4'd2, 16'd8};///home/dawsonjon/main.c : 5 {'a': 2, 'b': 8, 'trace': /home/dawsonjon/main.c : 5, 'op': 'store'}
    instructions[48] = {3'd1, 4'd3, 4'd4, 16'd0};///home/dawsonjon/main.c : 5 {'a': 4, 'literal': 0, 'z': 3, 'trace': /home/dawsonjon/main.c : 5, 'op': 'addl'}
    instructions[49] = {3'd1, 4'd4, 4'd7, 16'd0};///home/dawsonjon/main.c : 5 {'a': 7, 'literal': 0, 'z': 4, 'trace': /home/dawsonjon/main.c : 5, 'op': 'addl'}
    instructions[50] = {3'd6, 4'd0, 4'd6, 16'd0};///home/dawsonjon/main.c : 5 {'a': 6, 'trace': /home/dawsonjon/main.c : 5, 'op': 'return'}
  end

  
  always @(posedge clk)
  begin
    load_data <= memory[load_address];
    if(store_enable && state == execute) begin
      if (store_address > 1023) begin
        exception <= 1'b1;
      end
      memory[store_address] <= store_data;
    end
    if (rst==1'b1) begin
      exception <= 1'b0;
    end
  end


  //////////////////////////////////////////////////////////////////////////////
  // PIPELINE STAGE 1 -- FETCH INSTRUCTION
  //                                                                            
  
  always @(posedge clk)
  begin
    //implement memory for instructions
    if (state == instruction_fetch || state == operand_fetch || state == execute) begin
      instruction <= instructions[program_counter];
      program_counter_1 <= program_counter;
    end
  end

  assign opcode    = instruction[26:24];
  assign address_z = instruction[23:20];
  assign address_a = instruction[19:16];
  assign address_b = instruction[3:0];
  assign literal   = instruction[15:0];
  assign forward_a = (address_a_2 == address_z_3 && write_enable);
  assign forward_b = (address_b_2 == address_z_3 && write_enable);

  //////////////////////////////////////////////////////////////////////////////
  // PIPELINE STAGE 2 -- FETCH OPERANDS
  //                                                                            
  
  always @(posedge clk)
  begin
    if (write_enable) begin
      registers[address_z_3] <= result;
    end
    if (state == operand_fetch || state == execute) begin
      opcode_2 <= opcode;
      literal_2 <= literal;
      address_a_2 <= address_a;
      address_b_2 <= address_b;
      address_z_2 <= address_z;
      program_counter_2 <= program_counter_1;
    end
  end
  assign register_a = registers[address_a_2];
  assign register_b = registers[address_b_2];
  assign operand_a = forward_a?result:register_a;
  assign operand_b = forward_b?result:register_b;
  assign store_address = operand_a;
  assign load_address = operand_a;
  assign store_data = operand_b;
  assign store_enable = (opcode_2==4);

  //////////////////////////////////////////////////////////////////////////////
  // PIPELINE STAGE 3 -- EXECUTE
  //                                                                            
  
  always @(posedge clk)
  begin

  write_enable <= 0;
  timer_clock <= timer_clock + 1;
  case(state)

    //instruction_fetch
    instruction_fetch: begin
      program_counter <= program_counter + 1;
      state <= operand_fetch;
    end
    //operand_fetch
    operand_fetch: begin
      program_counter <= program_counter + 1;
      state <= execute;
    end
    //execute
    execute: begin
      program_counter <= program_counter + 1;
      address_z_3 <= address_z_2;
      case(opcode_2)

        //literal
        16'd0:
        begin
          result<=$signed(literal_2);
          write_enable <= 1;
        end

        //addl
        16'd1:
        begin
          result<=operand_a + literal_2;
          write_enable <= 1;
        end

        //call
        16'd2:
        begin
          result <= program_counter_2 + 1;
          write_enable <= 1;
          program_counter <= literal_2;
          state <= instruction_fetch;
        end

        //stop
        16'd3:
        begin
        state <= stop;
        end

        //store
        16'd4:
        begin
        end

        //load
        16'd5:
        begin
          state <= load;
        end

        //return
        16'd6:
        begin
          program_counter <= operand_a;
          state <= instruction_fetch;
        end

        //add
        16'd7:
        begin
          long_result = operand_a + operand_b;
          result <= long_result[31:0];
          carry[0] <= long_result[32];
          write_enable <= 1;
        end

      endcase

    end

    load:
    begin
        result <= load_data;
        write_enable <= 1;
        state <= execute;
    end

    wait_state:
    begin
      if (timer) begin
        timer <= timer - 1;
      end else begin
        state <= execute;
      end
    end

    stop:
    begin
    end

    endcase

    if (rst == 1'b1) begin
      timer <= 0;
      timer_clock <= 0;
      program_counter <= 0;
      address_z_3 <= 0;
      result <= 0;
      a = 0;
      b = 0;
      z = 0;
      state <= instruction_fetch;
    end
  end

endmodule

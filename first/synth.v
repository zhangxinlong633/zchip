/* Generated by Yosys 0.9 (git sha1 UNKNOWN, clang 10.0.1 -fPIC -Os) */

(* cells_not_processed =  1  *)
(* src = "first.v:14" *)
module main(exception);
  (* src = "first.v:124" *)
  reg [31:0] _000_;
  (* src = "first.v:124" *)
  reg [26:0] _001_;
  (* src = "first.v:124" *)
  reg [31:0] _002_;
  (* src = "first.v:124" *)
  reg [26:0] _003_;
  (* src = "first.v:124" *)
  reg [31:0] _004_;
  (* src = "first.v:124" *)
  reg [26:0] _005_;
  (* src = "first.v:124" *)
  reg [31:0] _006_;
  (* src = "first.v:124" *)
  reg [26:0] _007_;
  (* src = "first.v:124" *)
  reg [31:0] _008_;
  (* src = "first.v:124" *)
  reg [26:0] _009_;
  (* src = "first.v:124" *)
  reg [31:0] _010_;
  (* src = "first.v:124" *)
  reg [26:0] _011_;
  (* src = "first.v:124" *)
  reg [31:0] _012_;
  (* src = "first.v:124" *)
  reg [26:0] _013_;
  (* src = "first.v:124" *)
  reg [31:0] _014_;
  (* src = "first.v:124" *)
  reg [26:0] _015_;
  (* src = "first.v:124" *)
  reg [31:0] _016_;
  (* src = "first.v:124" *)
  reg [26:0] _017_;
  (* src = "first.v:124" *)
  reg [31:0] _018_;
  (* src = "first.v:124" *)
  reg [26:0] _019_;
  (* src = "first.v:124" *)
  reg [31:0] _020_;
  (* src = "first.v:124" *)
  reg [26:0] _021_;
  (* src = "first.v:124" *)
  reg [31:0] _022_;
  (* src = "first.v:124" *)
  reg [26:0] _023_;
  (* src = "first.v:124" *)
  reg [31:0] _024_;
  (* src = "first.v:124" *)
  reg [26:0] _025_;
  (* src = "first.v:124" *)
  reg [31:0] _026_;
  (* src = "first.v:124" *)
  reg [26:0] _027_;
  (* src = "first.v:124" *)
  reg [31:0] _028_;
  (* src = "first.v:124" *)
  reg [26:0] _029_;
  (* src = "first.v:124" *)
  reg [31:0] _030_;
  (* src = "first.v:124" *)
  reg [26:0] _031_;
  (* src = "first.v:124" *)
  reg [31:0] _032_;
  (* src = "first.v:124" *)
  reg [26:0] _033_;
  (* src = "first.v:124" *)
  reg [31:0] _034_;
  (* src = "first.v:124" *)
  reg [26:0] _035_;
  (* src = "first.v:124" *)
  reg [31:0] _036_;
  (* src = "first.v:124" *)
  reg [26:0] _037_;
  (* src = "first.v:124" *)
  reg [31:0] _038_;
  (* src = "first.v:124" *)
  reg [26:0] _039_;
  (* src = "first.v:124" *)
  reg [31:0] _040_;
  (* src = "first.v:124" *)
  reg [26:0] _041_;
  (* src = "first.v:124" *)
  reg [31:0] _042_;
  (* src = "first.v:124" *)
  reg [26:0] _043_;
  (* src = "first.v:124" *)
  reg [31:0] _044_;
  (* src = "first.v:124" *)
  reg [26:0] _045_;
  (* src = "first.v:124" *)
  reg [31:0] _046_;
  (* src = "first.v:124" *)
  reg [26:0] _047_;
  (* src = "first.v:124" *)
  reg [31:0] _048_;
  (* src = "first.v:124" *)
  reg [26:0] _049_;
  (* src = "first.v:124" *)
  reg [31:0] _050_;
  (* src = "first.v:124" *)
  reg [26:0] _051_;
  (* src = "first.v:124" *)
  reg [31:0] _052_;
  (* src = "first.v:124" *)
  reg [26:0] _053_;
  (* src = "first.v:124" *)
  reg [31:0] _054_;
  (* src = "first.v:124" *)
  reg [26:0] _055_;
  (* src = "first.v:124" *)
  reg [31:0] _056_;
  (* src = "first.v:124" *)
  reg [26:0] _057_;
  (* src = "first.v:124" *)
  reg [31:0] _058_;
  (* src = "first.v:124" *)
  reg [26:0] _059_;
  (* src = "first.v:124" *)
  reg [31:0] _060_;
  (* src = "first.v:124" *)
  reg [26:0] _061_;
  (* src = "first.v:124" *)
  reg [31:0] _062_;
  (* src = "first.v:124" *)
  reg [26:0] _063_;
  (* src = "first.v:124" *)
  reg [31:0] _064_;
  (* src = "first.v:124" *)
  reg [26:0] _065_;
  (* src = "first.v:124" *)
  reg [31:0] _066_;
  (* src = "first.v:124" *)
  reg [26:0] _067_;
  (* src = "first.v:124" *)
  reg [31:0] _068_;
  (* src = "first.v:124" *)
  reg [26:0] _069_;
  (* src = "first.v:124" *)
  reg [31:0] _070_;
  (* src = "first.v:124" *)
  reg [26:0] _071_;
  (* src = "first.v:124" *)
  reg [31:0] _072_;
  (* src = "first.v:124" *)
  reg [26:0] _073_;
  (* src = "first.v:124" *)
  reg [31:0] _074_;
  (* src = "first.v:124" *)
  reg [26:0] _075_;
  (* src = "first.v:124" *)
  reg [31:0] _076_;
  (* src = "first.v:124" *)
  reg [26:0] _077_;
  (* src = "first.v:124" *)
  reg [31:0] _078_;
  (* src = "first.v:124" *)
  reg [26:0] _079_;
  (* src = "first.v:124" *)
  reg [31:0] _080_;
  (* src = "first.v:124" *)
  reg [26:0] _081_;
  (* src = "first.v:124" *)
  reg [31:0] _082_;
  (* src = "first.v:124" *)
  reg [26:0] _083_;
  (* src = "first.v:124" *)
  reg [31:0] _084_;
  (* src = "first.v:124" *)
  reg [26:0] _085_;
  (* src = "first.v:124" *)
  reg [31:0] _086_;
  (* src = "first.v:124" *)
  reg [26:0] _087_;
  (* src = "first.v:124" *)
  reg [31:0] _088_;
  (* src = "first.v:124" *)
  reg [26:0] _089_;
  (* src = "first.v:124" *)
  reg [31:0] _090_;
  (* src = "first.v:124" *)
  reg [26:0] _091_;
  (* src = "first.v:124" *)
  reg [31:0] _092_;
  (* src = "first.v:124" *)
  reg [26:0] _093_;
  (* src = "first.v:124" *)
  reg [31:0] _094_;
  (* src = "first.v:124" *)
  reg [26:0] _095_;
  (* src = "first.v:124" *)
  reg [31:0] _096_;
  (* src = "first.v:124" *)
  reg [26:0] _097_;
  (* src = "first.v:124" *)
  reg [31:0] _098_;
  (* src = "first.v:124" *)
  reg [26:0] _099_;
  (* src = "first.v:124" *)
  reg [31:0] _100_;
  (* src = "first.v:124" *)
  reg [26:0] _101_;
  (* src = "first.v:180" *)
  reg [15:0] _102_;
  (* src = "first.v:180" *)
  reg [31:0] _103_;
  (* src = "first.v:180" *)
  reg [31:0] _104_;
  (* src = "first.v:220" *)
  reg [3:0] _105_;
  (* src = "first.v:220" *)
  reg [31:0] _106_;
  (* src = "first.v:220" *)
  reg [31:0] _107_;
  (* src = "first.v:247" *)
  reg [3:0] _108_;
  (* src = "first.v:220" *)
  reg [3:0] _109_;
  (* src = "first.v:220" *)
  reg [3:0] _110_;
  (* src = "first.v:220" *)
  reg [3:0] _111_;
  (* src = "first.v:247" *)
  reg [3:0] _112_;
  (* src = "first.v:247" *)
  reg [3:0] _113_;
  (* src = "first.v:247" *)
  reg _114_;
  (* src = "first.v:180" *)
  reg _115_;
  (* src = "first.v:199" *)
  reg [42:0] _116_;
  (* src = "first.v:220" *)
  reg [15:0] _117_;
  (* src = "first.v:180" *)
  reg [31:0] _118_;
  (* src = "first.v:247" *)
  reg [63:0] _119_;
  (* src = "first.v:220" *)
  reg [2:0] _120_;
  (* src = "first.v:247" *)
  reg [15:0] _121_;
  (* src = "first.v:199" *)
  reg [15:0] _122_;
  (* src = "first.v:220" *)
  reg [15:0] _123_;
  (* src = "first.v:247" *)
  reg [31:0] _124_;
  (* src = "first.v:85" *)
  reg _125_;
  (* src = "first.v:247" *)
  reg [5:0] _126_;
  (* src = "first.v:247" *)
  reg [31:0] _127_;
  (* src = "first.v:247" *)
  reg [63:0] _128_;
  (* src = "first.v:247" *)
  reg _129_;
  (* src = "first.v:247" *)
  reg [3:0] _130_;
  (* src = "first.v:247" *)
  reg [3:0] _131_;
  (* src = "first.v:247" *)
  reg [3:0] _132_;
  (* src = "first.v:247" *)
  reg [63:0] _133_;
  (* src = "first.v:247" *)
  reg [3:0] _134_;
  (* src = "first.v:247" *)
  reg [63:0] _135_;
  (* src = "first.v:251" *)
  wire [63:0] _136_;
  (* src = "first.v:256" *)
  wire [31:0] _137_;
  (* src = "first.v:261" *)
  wire [31:0] _138_;
  (* src = "first.v:266" *)
  wire [31:0] _139_;
  (* src = "first.v:280" *)
  wire [31:0] _140_;
  (* src = "first.v:287" *)
  wire [31:0] _141_;
  (* src = "first.v:320" *)
  wire [63:0] _142_;
  (* src = "first.v:183" *)
  wire _143_;
  (* src = "first.v:189" *)
  wire _144_;
  (* src = "first.v:202" *)
  wire _145_;
  (* src = "first.v:202" *)
  wire _146_;
  (* src = "first.v:202" *)
  wire _147_;
  (* src = "first.v:213" *)
  wire _148_;
  (* src = "first.v:214" *)
  wire _149_;
  (* src = "first.v:225" *)
  wire _150_;
  (* src = "first.v:225" *)
  wire _151_;
  (* src = "first.v:241" *)
  wire _152_;
  (* src = "first.v:352" *)
  wire _153_;
  (* src = "first.v:184" *)
  wire _154_;
  (* src = "first.v:183" *)
  wire _155_;
  (* src = "first.v:213" *)
  wire _156_;
  (* src = "first.v:214" *)
  wire _157_;
  (* src = "first.v:202" *)
  wire _158_;
  (* src = "first.v:202" *)
  wire _159_;
  (* src = "first.v:225" *)
  wire _160_;
  (* src = "first.v:203" *)
  wire [26:0] _161_;
  (* src = "first.v:182" *)
  wire [31:0] _162_;
  (* src = "first.v:234" *)
  wire [31:0] _163_;
  (* src = "first.v:235" *)
  wire [31:0] _164_;
  (* src = "first.v:126" *)
  reg [31:0] _165_;
  (* src = "first.v:126" *)
  reg [26:0] _166_;
  (* src = "first.v:127" *)
  reg [31:0] _167_;
  (* src = "first.v:127" *)
  reg [26:0] _168_;
  (* src = "first.v:128" *)
  reg [31:0] _169_;
  (* src = "first.v:128" *)
  reg [26:0] _170_;
  (* src = "first.v:129" *)
  reg [31:0] _171_;
  (* src = "first.v:129" *)
  reg [26:0] _172_;
  (* src = "first.v:130" *)
  reg [31:0] _173_;
  (* src = "first.v:130" *)
  reg [26:0] _174_;
  (* src = "first.v:131" *)
  reg [31:0] _175_;
  (* src = "first.v:131" *)
  reg [26:0] _176_;
  (* src = "first.v:132" *)
  reg [31:0] _177_;
  (* src = "first.v:132" *)
  reg [26:0] _178_;
  (* src = "first.v:133" *)
  reg [31:0] _179_;
  (* src = "first.v:133" *)
  reg [26:0] _180_;
  (* src = "first.v:134" *)
  reg [31:0] _181_;
  (* src = "first.v:134" *)
  reg [26:0] _182_;
  (* src = "first.v:135" *)
  reg [31:0] _183_;
  (* src = "first.v:135" *)
  reg [26:0] _184_;
  (* src = "first.v:136" *)
  reg [31:0] _185_;
  (* src = "first.v:136" *)
  reg [26:0] _186_;
  (* src = "first.v:137" *)
  reg [31:0] _187_;
  (* src = "first.v:137" *)
  reg [26:0] _188_;
  (* src = "first.v:138" *)
  reg [31:0] _189_;
  (* src = "first.v:138" *)
  reg [26:0] _190_;
  (* src = "first.v:139" *)
  reg [31:0] _191_;
  (* src = "first.v:139" *)
  reg [26:0] _192_;
  (* src = "first.v:140" *)
  reg [31:0] _193_;
  (* src = "first.v:140" *)
  reg [26:0] _194_;
  (* src = "first.v:141" *)
  reg [31:0] _195_;
  (* src = "first.v:141" *)
  reg [26:0] _196_;
  (* src = "first.v:142" *)
  reg [31:0] _197_;
  (* src = "first.v:142" *)
  reg [26:0] _198_;
  (* src = "first.v:143" *)
  reg [31:0] _199_;
  (* src = "first.v:143" *)
  reg [26:0] _200_;
  (* src = "first.v:144" *)
  reg [31:0] _201_;
  (* src = "first.v:144" *)
  reg [26:0] _202_;
  (* src = "first.v:145" *)
  reg [31:0] _203_;
  (* src = "first.v:145" *)
  reg [26:0] _204_;
  (* src = "first.v:146" *)
  reg [31:0] _205_;
  (* src = "first.v:146" *)
  reg [26:0] _206_;
  (* src = "first.v:147" *)
  reg [31:0] _207_;
  (* src = "first.v:147" *)
  reg [26:0] _208_;
  (* src = "first.v:148" *)
  reg [31:0] _209_;
  (* src = "first.v:148" *)
  reg [26:0] _210_;
  (* src = "first.v:149" *)
  reg [31:0] _211_;
  (* src = "first.v:149" *)
  reg [26:0] _212_;
  (* src = "first.v:150" *)
  reg [31:0] _213_;
  (* src = "first.v:150" *)
  reg [26:0] _214_;
  (* src = "first.v:151" *)
  reg [31:0] _215_;
  (* src = "first.v:151" *)
  reg [26:0] _216_;
  (* src = "first.v:152" *)
  reg [31:0] _217_;
  (* src = "first.v:152" *)
  reg [26:0] _218_;
  (* src = "first.v:153" *)
  reg [31:0] _219_;
  (* src = "first.v:153" *)
  reg [26:0] _220_;
  (* src = "first.v:154" *)
  reg [31:0] _221_;
  (* src = "first.v:154" *)
  reg [26:0] _222_;
  (* src = "first.v:155" *)
  reg [31:0] _223_;
  (* src = "first.v:155" *)
  reg [26:0] _224_;
  (* src = "first.v:156" *)
  reg [31:0] _225_;
  (* src = "first.v:156" *)
  reg [26:0] _226_;
  (* src = "first.v:157" *)
  reg [31:0] _227_;
  (* src = "first.v:157" *)
  reg [26:0] _228_;
  (* src = "first.v:158" *)
  reg [31:0] _229_;
  (* src = "first.v:158" *)
  reg [26:0] _230_;
  (* src = "first.v:159" *)
  reg [31:0] _231_;
  (* src = "first.v:159" *)
  reg [26:0] _232_;
  (* src = "first.v:160" *)
  reg [31:0] _233_;
  (* src = "first.v:160" *)
  reg [26:0] _234_;
  (* src = "first.v:161" *)
  reg [31:0] _235_;
  (* src = "first.v:161" *)
  reg [26:0] _236_;
  (* src = "first.v:162" *)
  reg [31:0] _237_;
  (* src = "first.v:162" *)
  reg [26:0] _238_;
  (* src = "first.v:163" *)
  reg [31:0] _239_;
  (* src = "first.v:163" *)
  reg [26:0] _240_;
  (* src = "first.v:164" *)
  reg [31:0] _241_;
  (* src = "first.v:164" *)
  reg [26:0] _242_;
  (* src = "first.v:165" *)
  reg [31:0] _243_;
  (* src = "first.v:165" *)
  reg [26:0] _244_;
  (* src = "first.v:166" *)
  reg [31:0] _245_;
  (* src = "first.v:166" *)
  reg [26:0] _246_;
  (* src = "first.v:167" *)
  reg [31:0] _247_;
  (* src = "first.v:167" *)
  reg [26:0] _248_;
  (* src = "first.v:168" *)
  reg [31:0] _249_;
  (* src = "first.v:168" *)
  reg [26:0] _250_;
  (* src = "first.v:169" *)
  reg [31:0] _251_;
  (* src = "first.v:169" *)
  reg [26:0] _252_;
  (* src = "first.v:170" *)
  reg [31:0] _253_;
  (* src = "first.v:170" *)
  reg [26:0] _254_;
  (* src = "first.v:171" *)
  reg [31:0] _255_;
  (* src = "first.v:171" *)
  reg [26:0] _256_;
  (* src = "first.v:172" *)
  reg [31:0] _257_;
  (* src = "first.v:172" *)
  reg [26:0] _258_;
  (* src = "first.v:173" *)
  reg [31:0] _259_;
  (* src = "first.v:173" *)
  reg [26:0] _260_;
  (* src = "first.v:174" *)
  reg [31:0] _261_;
  (* src = "first.v:174" *)
  reg [26:0] _262_;
  (* src = "first.v:175" *)
  reg [31:0] _263_;
  (* src = "first.v:175" *)
  reg [26:0] _264_;
  (* src = "first.v:176" *)
  reg [31:0] _265_;
  (* src = "first.v:176" *)
  reg [26:0] _266_;
  (* src = "first.v:187" *)
  reg [15:0] _267_;
  (* src = "first.v:187" *)
  reg [31:0] _268_;
  (* src = "first.v:187" *)
  reg [31:0] _269_;
  (* src = "first.v:223" *)
  reg [3:0] _270_;
  (* src = "first.v:223" *)
  reg [31:0] _271_;
  (* src = "first.v:223" *)
  reg [31:0] _272_;
  (* src = "first.v:339" *)
  wire _273_;
  (* src = "first.v:340" *)
  wire [31:0] _274_;
  (* src = "first.v:236" *)
  wire [31:0] _275_;
  (* src = "first.v:237" *)
  wire [31:0] _276_;
  (* src = "first.v:29" *)
  reg [3:0] a;
  (* src = "first.v:42" *)
  wire [31:0] a_hi;
  (* src = "first.v:44" *)
  wire [31:0] a_lo;
  (* src = "first.v:48" *)
  wire [15:0] address;
  (* src = "first.v:65" *)
  wire [3:0] address_a;
  (* src = "first.v:33" *)
  reg [3:0] address_a_2;
  (* src = "first.v:66" *)
  wire [3:0] address_b;
  (* src = "first.v:34" *)
  reg [3:0] address_b_2;
  (* src = "first.v:67" *)
  wire [3:0] address_z;
  (* src = "first.v:35" *)
  reg [3:0] address_z_2;
  (* src = "first.v:36" *)
  reg [3:0] address_z_3;
  (* src = "first.v:30" *)
  reg [3:0] b;
  (* src = "first.v:43" *)
  wire [31:0] b_hi;
  (* src = "first.v:45" *)
  wire [31:0] b_lo;
  (* src = "first.v:51" *)
  reg [31:0] carry;
  (* src = "first.v:52" *)
  wire clk;
  (* src = "first.v:50" *)
  wire [31:0] data_in;
  (* src = "first.v:49" *)
  wire [31:0] data_out;
  (* src = "first.v:55" *)
  output exception;
  reg exception;
  (* src = "first.v:15" *)
  wire [31:0] file_count;
  (* src = "first.v:72" *)
  wire forward_a;
  (* src = "first.v:73" *)
  wire forward_b;
  (* src = "first.v:27" *)
  reg [42:0] instruction;
  (* src = "first.v:63" *)
  wire [15:0] literal;
  (* src = "first.v:41" *)
  reg [15:0] literal_2;
  (* src = "first.v:68" *)
  wire [15:0] load_address;
  (* src = "first.v:37" *)
  reg [31:0] load_data;
  (* src = "first.v:46" *)
  reg [63:0] long_result;
  (* src = "first.v:64" *)
  wire [2:0] opcode;
  (* src = "first.v:28" *)
  reg [2:0] opcode_2;
  (* src = "first.v:59" *)
  wire [31:0] operand_a;
  (* src = "first.v:60" *)
  wire [31:0] operand_b;
  (* src = "first.v:24" *)
  reg [15:0] program_counter;
  (* src = "first.v:25" *)
  reg [15:0] program_counter_1;
  (* src = "first.v:26" *)
  reg [15:0] program_counter_2;
  (* src = "first.v:40" *)
  wire [31:0] read_input;
  (* src = "first.v:61" *)
  wire [31:0] register_a;
  (* src = "first.v:62" *)
  wire [31:0] register_b;
  (* src = "first.v:47" *)
  reg [31:0] result;
  (* src = "first.v:53" *)
  reg rst;
  (* src = "first.v:54" *)
  reg [5:0] state;
  (* src = "first.v:69" *)
  wire [15:0] store_address;
  (* src = "first.v:70" *)
  wire [31:0] store_data;
  (* src = "first.v:71" *)
  wire store_enable;
  (* src = "first.v:22" *)
  reg [31:0] timer;
  (* src = "first.v:23" *)
  reg [63:0] timer_clock;
  (* src = "first.v:32" *)
  reg write_enable;
  (* src = "first.v:38" *)
  wire [31:0] write_output;
  (* src = "first.v:39" *)
  wire [31:0] write_value;
  (* src = "first.v:31" *)
  reg [3:0] z;
  (* src = "first.v:56" *)
  reg [26:0] instructions [50:0];
  (* src = "first.v:57" *)
  reg [31:0] memory [1023:0];
  (* src = "first.v:58" *)
  reg [31:0] registers [15:0];
  assign _136_ = timer_clock + (* src = "first.v:251" *) 32'd1;
  assign _137_ = program_counter + (* src = "first.v:256" *) 32'd1;
  assign _138_ = program_counter + (* src = "first.v:261" *) 32'd1;
  assign _139_ = program_counter + (* src = "first.v:266" *) 32'd1;
  assign _140_ = operand_a + (* src = "first.v:280" *) literal_2;
  assign _141_ = program_counter_2 + (* src = "first.v:287" *) 32'd1;
  assign _142_ = operand_a + (* src = "first.v:320" *) operand_b;
  assign _143_ = state == (* src = "first.v:183" *) 3'h3;
  assign _144_ = rst == (* src = "first.v:189" *) 1'h1;
  assign _145_ = state == (* src = "first.v:202" *) 3'h1;
  assign _146_ = state == (* src = "first.v:202" *) 3'h2;
  assign _147_ = state == (* src = "first.v:202" *) 3'h3;
  assign _148_ = address_a_2 == (* src = "first.v:213" *) address_z_3;
  assign _149_ = address_b_2 == (* src = "first.v:214" *) address_z_3;
  assign _150_ = state == (* src = "first.v:225" *) 3'h2;
  assign _151_ = state == (* src = "first.v:225" *) 3'h3;
  assign _152_ = opcode_2 == (* src = "first.v:241" *) 32'd4;
  assign _153_ = rst == (* src = "first.v:352" *) 1'h1;
  assign _154_ = store_address > (* src = "first.v:184" *) 32'd1023;
  assign _155_ = store_enable && (* src = "first.v:183" *) _143_;
  assign _156_ = _148_ && (* src = "first.v:213" *) write_enable;
  assign _157_ = _149_ && (* src = "first.v:214" *) write_enable;
  assign _158_ = _145_ || (* src = "first.v:202" *) _146_;
  assign _159_ = _158_ || (* src = "first.v:202" *) _147_;
  assign _160_ = _150_ || (* src = "first.v:225" *) _151_;
  (* src = "first.v:126" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd97),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _302_ (
    .ADDR(_165_),
    .DATA(_166_)
  );
  (* src = "first.v:127" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd98),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _303_ (
    .ADDR(_167_),
    .DATA(_168_)
  );
  (* src = "first.v:128" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd99),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _304_ (
    .ADDR(_169_),
    .DATA(_170_)
  );
  (* src = "first.v:129" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd100),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _305_ (
    .ADDR(_171_),
    .DATA(_172_)
  );
  (* src = "first.v:130" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd101),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _306_ (
    .ADDR(_173_),
    .DATA(_174_)
  );
  (* src = "first.v:131" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd102),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _307_ (
    .ADDR(_175_),
    .DATA(_176_)
  );
  (* src = "first.v:132" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd103),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _308_ (
    .ADDR(_177_),
    .DATA(_178_)
  );
  (* src = "first.v:133" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd104),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _309_ (
    .ADDR(_179_),
    .DATA(_180_)
  );
  (* src = "first.v:134" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd105),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _310_ (
    .ADDR(_181_),
    .DATA(_182_)
  );
  (* src = "first.v:135" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd106),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _311_ (
    .ADDR(_183_),
    .DATA(_184_)
  );
  (* src = "first.v:136" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd107),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _312_ (
    .ADDR(_185_),
    .DATA(_186_)
  );
  (* src = "first.v:137" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd108),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _313_ (
    .ADDR(_187_),
    .DATA(_188_)
  );
  (* src = "first.v:138" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd109),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _314_ (
    .ADDR(_189_),
    .DATA(_190_)
  );
  (* src = "first.v:139" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd110),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _315_ (
    .ADDR(_191_),
    .DATA(_192_)
  );
  (* src = "first.v:140" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd111),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _316_ (
    .ADDR(_193_),
    .DATA(_194_)
  );
  (* src = "first.v:141" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd112),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _317_ (
    .ADDR(_195_),
    .DATA(_196_)
  );
  (* src = "first.v:142" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd113),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _318_ (
    .ADDR(_197_),
    .DATA(_198_)
  );
  (* src = "first.v:143" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd114),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _319_ (
    .ADDR(_199_),
    .DATA(_200_)
  );
  (* src = "first.v:144" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd115),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _320_ (
    .ADDR(_201_),
    .DATA(_202_)
  );
  (* src = "first.v:145" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd116),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _321_ (
    .ADDR(_203_),
    .DATA(_204_)
  );
  (* src = "first.v:146" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd117),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _322_ (
    .ADDR(_205_),
    .DATA(_206_)
  );
  (* src = "first.v:147" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd118),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _323_ (
    .ADDR(_207_),
    .DATA(_208_)
  );
  (* src = "first.v:148" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd119),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _324_ (
    .ADDR(_209_),
    .DATA(_210_)
  );
  (* src = "first.v:149" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd120),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _325_ (
    .ADDR(_211_),
    .DATA(_212_)
  );
  (* src = "first.v:150" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd121),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _326_ (
    .ADDR(_213_),
    .DATA(_214_)
  );
  (* src = "first.v:151" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd122),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _327_ (
    .ADDR(_215_),
    .DATA(_216_)
  );
  (* src = "first.v:152" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd123),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _328_ (
    .ADDR(_217_),
    .DATA(_218_)
  );
  (* src = "first.v:153" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd124),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _329_ (
    .ADDR(_219_),
    .DATA(_220_)
  );
  (* src = "first.v:154" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd125),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _330_ (
    .ADDR(_221_),
    .DATA(_222_)
  );
  (* src = "first.v:155" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd126),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _331_ (
    .ADDR(_223_),
    .DATA(_224_)
  );
  (* src = "first.v:156" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd127),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _332_ (
    .ADDR(_225_),
    .DATA(_226_)
  );
  (* src = "first.v:157" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd128),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _333_ (
    .ADDR(_227_),
    .DATA(_228_)
  );
  (* src = "first.v:158" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd129),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _334_ (
    .ADDR(_229_),
    .DATA(_230_)
  );
  (* src = "first.v:159" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd130),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _335_ (
    .ADDR(_231_),
    .DATA(_232_)
  );
  (* src = "first.v:160" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd131),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _336_ (
    .ADDR(_233_),
    .DATA(_234_)
  );
  (* src = "first.v:161" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd132),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _337_ (
    .ADDR(_235_),
    .DATA(_236_)
  );
  (* src = "first.v:162" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd133),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _338_ (
    .ADDR(_237_),
    .DATA(_238_)
  );
  (* src = "first.v:163" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd134),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _339_ (
    .ADDR(_239_),
    .DATA(_240_)
  );
  (* src = "first.v:164" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd135),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _340_ (
    .ADDR(_241_),
    .DATA(_242_)
  );
  (* src = "first.v:165" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd136),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _341_ (
    .ADDR(_243_),
    .DATA(_244_)
  );
  (* src = "first.v:166" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd137),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _342_ (
    .ADDR(_245_),
    .DATA(_246_)
  );
  (* src = "first.v:167" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd138),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _343_ (
    .ADDR(_247_),
    .DATA(_248_)
  );
  (* src = "first.v:168" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd139),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _344_ (
    .ADDR(_249_),
    .DATA(_250_)
  );
  (* src = "first.v:169" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd140),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _345_ (
    .ADDR(_251_),
    .DATA(_252_)
  );
  (* src = "first.v:170" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd141),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _346_ (
    .ADDR(_253_),
    .DATA(_254_)
  );
  (* src = "first.v:171" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd142),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _347_ (
    .ADDR(_255_),
    .DATA(_256_)
  );
  (* src = "first.v:172" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd143),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _348_ (
    .ADDR(_257_),
    .DATA(_258_)
  );
  (* src = "first.v:173" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd144),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _349_ (
    .ADDR(_259_),
    .DATA(_260_)
  );
  (* src = "first.v:174" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd145),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _350_ (
    .ADDR(_261_),
    .DATA(_262_)
  );
  (* src = "first.v:175" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd146),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _351_ (
    .ADDR(_263_),
    .DATA(_264_)
  );
  (* src = "first.v:176" *)
  \$meminit  #(
    .ABITS(32'd32),
    .MEMID("\\instructions"),
    .PRIORITY(32'd147),
    .WIDTH(32'd27),
    .WORDS(32'd1)
  ) _352_ (
    .ADDR(_265_),
    .DATA(_266_)
  );
  (* src = "first.v:203" *)
  \$memrd  #(
    .ABITS(32'd16),
    .CLK_ENABLE(32'd0),
    .CLK_POLARITY(32'd0),
    .MEMID("\\instructions"),
    .TRANSPARENT(32'd0),
    .WIDTH(32'd27)
  ) _353_ (
    .ADDR(program_counter),
    .CLK(1'hx),
    .DATA(_161_),
    .EN(1'hx)
  );
  (* src = "first.v:182" *)
  \$memrd  #(
    .ABITS(32'd16),
    .CLK_ENABLE(32'd0),
    .CLK_POLARITY(32'd0),
    .MEMID("\\memory"),
    .TRANSPARENT(32'd0),
    .WIDTH(32'd32)
  ) _354_ (
    .ADDR(load_address),
    .CLK(1'hx),
    .DATA(_162_),
    .EN(1'hx)
  );
  (* src = "first.v:234" *)
  \$memrd  #(
    .ABITS(32'd4),
    .CLK_ENABLE(32'd0),
    .CLK_POLARITY(32'd0),
    .MEMID("\\registers"),
    .TRANSPARENT(32'd0),
    .WIDTH(32'd32)
  ) _355_ (
    .ADDR(address_a_2),
    .CLK(1'hx),
    .DATA(_163_),
    .EN(1'hx)
  );
  (* src = "first.v:235" *)
  \$memrd  #(
    .ABITS(32'd4),
    .CLK_ENABLE(32'd0),
    .CLK_POLARITY(32'd0),
    .MEMID("\\registers"),
    .TRANSPARENT(32'd0),
    .WIDTH(32'd32)
  ) _356_ (
    .ADDR(address_b_2),
    .CLK(1'hx),
    .DATA(_164_),
    .EN(1'hx)
  );
  (* src = "first.v:187" *)
  \$memwr  #(
    .ABITS(32'd16),
    .CLK_ENABLE(32'd0),
    .CLK_POLARITY(32'd0),
    .MEMID("\\memory"),
    .PRIORITY(32'd148),
    .WIDTH(32'd32)
  ) _357_ (
    .ADDR(_267_),
    .CLK(1'hx),
    .DATA(_268_),
    .EN(_269_)
  );
  (* src = "first.v:223" *)
  \$memwr  #(
    .ABITS(32'd4),
    .CLK_ENABLE(32'd0),
    .CLK_POLARITY(32'd0),
    .MEMID("\\registers"),
    .PRIORITY(32'd149),
    .WIDTH(32'd32)
  ) _358_ (
    .ADDR(_270_),
    .CLK(1'hx),
    .DATA(_271_),
    .EN(_272_)
  );
  assign _273_ = | (* src = "first.v:339" *) timer;
  assign _274_ = timer - (* src = "first.v:340" *) 32'd1;
  assign _275_ = forward_a ? (* src = "first.v:236" *) result : register_a;
  assign _276_ = forward_b ? (* src = "first.v:237" *) result : register_b;
  always @* begin
  end
  always @* begin
  end
  initial begin
  end
  always @* begin
    _000_ = 32'd0;
    _001_ = 27'h0300000;
    _002_ = 32'd1;
    _003_ = 27'h0400000;
    _004_ = 32'd2;
    _005_ = 27'h1330002;
    _006_ = 32'd3;
    _007_ = 27'h1740000;
    _008_ = 32'd4;
    _009_ = 27'h1430000;
    _010_ = 32'd5;
    _011_ = 27'h2600007;
    _012_ = 32'd6;
    _013_ = 27'h3000000;
    _014_ = 32'd7;
    _015_ = 27'h1330000;
    _016_ = 32'd8;
    _017_ = 27'h4030006;
    _018_ = 32'd9;
    _019_ = 27'h1330001;
    _020_ = 32'd10;
    _021_ = 27'h4030007;
    _022_ = 32'd11;
    _023_ = 27'h1330001;
    _024_ = 32'd12;
    _025_ = 27'h080000a;
    _026_ = 32'd13;
    _027_ = 27'h4030008;
    _028_ = 32'd14;
    _029_ = 27'h1330001;
    _030_ = 32'd15;
    _031_ = 27'h0800014;
    _032_ = 32'd16;
    _033_ = 27'h4030008;
    _034_ = 32'd17;
    _035_ = 27'h1330001;
    _036_ = 32'd18;
    _037_ = 27'h1740000;
    _038_ = 32'd19;
    _039_ = 27'h1430000;
    _040_ = 32'd20;
    _041_ = 27'h2600022;
    _042_ = 32'd21;
    _043_ = 27'h133fffe;
    _044_ = 32'd22;
    _045_ = 27'h133ffff;
    _046_ = 32'd23;
    _047_ = 27'h5730000;
    _048_ = 32'd24;
    _049_ = 27'h133ffff;
    _050_ = 32'd25;
    _051_ = 27'h5630000;
    _052_ = 32'd26;
    _053_ = 27'h0200000;
    _054_ = 32'd27;
    _055_ = 27'h5820000;
    _056_ = 32'd28;
    _057_ = 27'h0800000;
    _058_ = 32'd29;
    _059_ = 27'h0200001;
    _060_ = 32'd30;
    _061_ = 27'h4020008;
    _062_ = 32'd31;
    _063_ = 27'h1340000;
    _064_ = 32'd32;
    _065_ = 27'h1470000;
    _066_ = 32'd33;
    _067_ = 27'h6060000;
    _068_ = 32'd34;
    _069_ = 27'h1330000;
    _070_ = 32'd35;
    _071_ = 27'h184ffff;
    _072_ = 32'd36;
    _073_ = 27'h1280000;
    _074_ = 32'd37;
    _075_ = 27'h5820000;
    _076_ = 32'd38;
    _077_ = 27'h4030008;
    _078_ = 32'd39;
    _079_ = 27'h1330001;
    _080_ = 32'd40;
    _081_ = 27'h184fffe;
    _082_ = 32'd41;
    _083_ = 27'h1280000;
    _084_ = 32'd42;
    _085_ = 27'h5820000;
    _086_ = 32'd43;
    _087_ = 27'h133ffff;
    _088_ = 32'd44;
    _089_ = 27'h5a30000;
    _090_ = 32'd45;
    _091_ = 27'h788000a;
    _092_ = 32'd46;
    _093_ = 27'h0200000;
    _094_ = 32'd47;
    _095_ = 27'h4020008;
    _096_ = 32'd48;
    _097_ = 27'h1340000;
    _098_ = 32'd49;
    _099_ = 27'h1470000;
    _100_ = 32'd50;
    _101_ = 27'h6060000;
  end
  always @* begin
      _165_ <= _000_;
      _166_ <= _001_;
      _167_ <= _002_;
      _168_ <= _003_;
      _169_ <= _004_;
      _170_ <= _005_;
      _171_ <= _006_;
      _172_ <= _007_;
      _173_ <= _008_;
      _174_ <= _009_;
      _175_ <= _010_;
      _176_ <= _011_;
      _177_ <= _012_;
      _178_ <= _013_;
      _179_ <= _014_;
      _180_ <= _015_;
      _181_ <= _016_;
      _182_ <= _017_;
      _183_ <= _018_;
      _184_ <= _019_;
      _185_ <= _020_;
      _186_ <= _021_;
      _187_ <= _022_;
      _188_ <= _023_;
      _189_ <= _024_;
      _190_ <= _025_;
      _191_ <= _026_;
      _192_ <= _027_;
      _193_ <= _028_;
      _194_ <= _029_;
      _195_ <= _030_;
      _196_ <= _031_;
      _197_ <= _032_;
      _198_ <= _033_;
      _199_ <= _034_;
      _200_ <= _035_;
      _201_ <= _036_;
      _202_ <= _037_;
      _203_ <= _038_;
      _204_ <= _039_;
      _205_ <= _040_;
      _206_ <= _041_;
      _207_ <= _042_;
      _208_ <= _043_;
      _209_ <= _044_;
      _210_ <= _045_;
      _211_ <= _046_;
      _212_ <= _047_;
      _213_ <= _048_;
      _214_ <= _049_;
      _215_ <= _050_;
      _216_ <= _051_;
      _217_ <= _052_;
      _218_ <= _053_;
      _219_ <= _054_;
      _220_ <= _055_;
      _221_ <= _056_;
      _222_ <= _057_;
      _223_ <= _058_;
      _224_ <= _059_;
      _225_ <= _060_;
      _226_ <= _061_;
      _227_ <= _062_;
      _228_ <= _063_;
      _229_ <= _064_;
      _230_ <= _065_;
      _231_ <= _066_;
      _232_ <= _067_;
      _233_ <= _068_;
      _234_ <= _069_;
      _235_ <= _070_;
      _236_ <= _071_;
      _237_ <= _072_;
      _238_ <= _073_;
      _239_ <= _074_;
      _240_ <= _075_;
      _241_ <= _076_;
      _242_ <= _077_;
      _243_ <= _078_;
      _244_ <= _079_;
      _245_ <= _080_;
      _246_ <= _081_;
      _247_ <= _082_;
      _248_ <= _083_;
      _249_ <= _084_;
      _250_ <= _085_;
      _251_ <= _086_;
      _252_ <= _087_;
      _253_ <= _088_;
      _254_ <= _089_;
      _255_ <= _090_;
      _256_ <= _091_;
      _257_ <= _092_;
      _258_ <= _093_;
      _259_ <= _094_;
      _260_ <= _095_;
      _261_ <= _096_;
      _262_ <= _097_;
      _263_ <= _098_;
      _264_ <= _099_;
      _265_ <= _100_;
      _266_ <= _101_;
  end
  initial begin
  end
  always @* begin
    _115_ = exception;
    _102_ = 16'hxxxx;
    _103_ = 32'hxxxxxxxx;
    _104_ = 32'd0;
    _118_ = _162_;
    (* src = "first.v:183" *)
    casez (_155_)
      /* src = "first.v:183" */
      1'h1:
        begin
          _102_ = store_address;
          _103_ = store_data;
          _104_ = 32'd4294967295;
          (* src = "first.v:184" *)
          casez (_154_)
            /* src = "first.v:184" */
            1'h1:
                _115_ = 1'h1;
            default:
                /* empty */;
          endcase
        end
      default:
          /* empty */;
    endcase
    (* src = "first.v:189" *)
    casez (_144_)
      /* src = "first.v:189" */
      1'h1:
          _115_ = 1'h0;
      default:
          /* empty */;
    endcase
  end
  always @(posedge clk) begin
      load_data <= _118_;
      exception <= _115_;
      _267_ <= _102_;
      _268_ <= _103_;
      _269_ <= _104_;
  end
  always @* begin
    _116_ = instruction;
    _122_ = program_counter_1;
    (* src = "first.v:202" *)
    casez (_159_)
      /* src = "first.v:202" */
      1'h1:
        begin
          _116_ = { 16'h0000, _161_ };
          _122_ = program_counter;
        end
      default:
          /* empty */;
    endcase
  end
  always @(posedge clk) begin
      instruction <= _116_;
      program_counter_1 <= _122_;
  end
  always @* begin
    _123_ = program_counter_2;
    _120_ = opcode_2;
    _109_ = address_a_2;
    _110_ = address_b_2;
    _111_ = address_z_2;
    _117_ = literal_2;
    _105_ = 4'hx;
    _106_ = 32'hxxxxxxxx;
    _107_ = 32'd0;
    (* src = "first.v:222" *)
    casez (write_enable)
      /* src = "first.v:222" */
      1'h1:
        begin
          _105_ = address_z_3;
          _106_ = result;
          _107_ = 32'd4294967295;
        end
      default:
          /* empty */;
    endcase
    (* src = "first.v:225" *)
    casez (_160_)
      /* src = "first.v:225" */
      1'h1:
        begin
          _120_ = opcode;
          _117_ = literal;
          _109_ = address_a;
          _110_ = address_b;
          _111_ = address_z;
          _123_ = program_counter_1;
        end
      default:
          /* empty */;
    endcase
  end
  always @(posedge clk) begin
      program_counter_2 <= _123_;
      opcode_2 <= _120_;
      address_a_2 <= _109_;
      address_b_2 <= _110_;
      address_z_2 <= _111_;
      literal_2 <= _117_;
      _270_ <= _105_;
      _271_ <= _106_;
      _272_ <= _107_;
  end
  always @* begin
    _121_ = program_counter;
    _127_ = timer;
    _112_ = address_z_3;
    _124_ = result;
    _114_ = carry[0];
    _126_ = state;
    _129_ = 1'h0;
    _128_ = _136_;
    _119_ = _133_;
    _108_ = _131_;
    _113_ = _132_;
    _130_ = _134_;
    (* src = "first.v:252" *)
    casez (state)
      /* src = "first.v:255" */
      6'h01:
        begin
          _133_ = long_result;
          _121_ = _137_[15:0];
          _126_ = 6'h02;
        end
      /* src = "first.v:260" */
      6'h02:
        begin
          _133_ = long_result;
          _121_ = _138_[15:0];
          _126_ = 6'h03;
        end
      /* src = "first.v:265" */
      6'h03:
        begin
          _121_ = _139_[15:0];
          _112_ = address_z_2;
          _133_ = _135_;
          (* src = "first.v:268" *)
          casez (opcode_2)
            /* src = "first.v:271" */
            3'h0:
              begin
                _135_ = long_result;
                _124_ = { literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2[15], literal_2 };
                _129_ = 1'h1;
              end
            /* src = "first.v:278" */
            3'h1:
              begin
                _135_ = long_result;
                _124_ = _140_;
                _129_ = 1'h1;
              end
            /* src = "first.v:285" */
            3'h2:
              begin
                _135_ = long_result;
                _124_ = _141_;
                _129_ = 1'h1;
                _121_ = literal_2;
                _126_ = 6'h01;
              end
            /* src = "first.v:294" */
            3'h3:
              begin
                _135_ = long_result;
                _126_ = 6'h00;
              end
            /* src = "first.v:300" */
            3'h4:
                _135_ = long_result;
            /* src = "first.v:305" */
            3'h5:
              begin
                _135_ = long_result;
                _126_ = 6'h04;
              end
            /* src = "first.v:311" */
            3'h6:
              begin
                _135_ = long_result;
                _121_ = operand_a[15:0];
                _126_ = 6'h01;
              end
            /* src = "first.v:318" */
            3'h7:
              begin
                _135_ = _142_;
                _124_ = _142_[31:0];
                _114_ = _142_[32];
                _129_ = 1'h1;
              end
            default:
                _135_ = long_result;
          endcase
        end
      /* src = "first.v:330" */
      6'h04:
        begin
          _133_ = long_result;
          _124_ = load_data;
          _129_ = 1'h1;
          _126_ = 6'h03;
        end
      /* src = "first.v:337" */
      6'h05:
        begin
          _133_ = long_result;
          (* src = "first.v:339" *)
          casez (_273_)
            /* src = "first.v:339" */
            1'h1:
                _127_ = _274_;
            /* src = "first.v:341" */
            default:
                _126_ = 6'h03;
          endcase
        end
      /* src = "first.v:346" */
      6'h00:
          _133_ = long_result;
      default:
          _133_ = long_result;
    endcase
    (* src = "first.v:352" *)
    casez (_153_)
      /* src = "first.v:352" */
      1'h1:
        begin
          _127_ = 32'd0;
          _128_ = 64'h0000000000000000;
          _121_ = 16'h0000;
          _112_ = 4'h0;
          _124_ = 32'd0;
          _131_ = 4'h0;
          _132_ = 4'h0;
          _134_ = 4'h0;
          _126_ = 6'h01;
        end
      default:
        begin
          _131_ = a;
          _132_ = b;
          _134_ = z;
        end
    endcase
  end
  always @(posedge clk) begin
      a <= _108_;
      program_counter <= _121_;
      timer <= _127_;
      timer_clock <= _128_;
      b <= _113_;
      z <= _130_;
      write_enable <= _129_;
      address_z_3 <= _112_;
      long_result <= _119_;
      result <= _124_;
      carry[0] <= _114_;
      state <= _126_;
  end
  always @* begin
    _125_ = 1'h0;
  end
  always @* begin
      rst <= _125_;
  end
  initial begin
  end
  assign opcode = instruction[26:24];
  assign address_z = instruction[23:20];
  assign address_a = instruction[19:16];
  assign address_b = instruction[3:0];
  assign literal = instruction[15:0];
  assign forward_a = _156_;
  assign forward_b = _157_;
  assign register_a = _163_;
  assign register_b = _164_;
  assign operand_a = _275_;
  assign operand_b = _276_;
  assign store_address = operand_a[15:0];
  assign load_address = operand_a[15:0];
  assign store_data = operand_b;
  assign store_enable = _152_;
endmodule
